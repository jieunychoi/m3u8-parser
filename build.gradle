group 'io.lindstrom'
version '0.17'

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'maven-publish'

ext {
    ideaGeneratedSources = file('out/production/classes/generated')
    ideaGeneratedSources = file('out/generated')
}

idea.module {
    sourceDirs += ideaGeneratedSources
    generatedSourceDirs += ideaGeneratedSources
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.immutables:value:2.8.2'
    compileOnly 'org.immutables:serial:2.8.2'
    testCompile 'junit:junit:4.12'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.12.1'
    compile 'com.nfl.dm.scte35:scte35-decoder:1.0.32-SNAPSHOT'
    compile 'com.esotericsoftware:kryo:5.0.3'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

archivesBaseName = "m3u8-parser"

if (project.hasProperty('ossrhUsername')) {
    signing {
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }

                pom.project {
                    name 'm3u8-parser'
                    packaging 'jar'
                    artifactId 'm3u8-parser'
                    description 'm3u8 parser'
                    url 'https://github.com/carlanton/m3u8-parser'

                    scm {
                        connection 'scm:git:https://github.com/carlanton/m3u8-parser.git'
                        developerConnection 'scm:git:git@github.com:carlanton/m3u8-parser.git'
                        url 'https://github.com/carlanton/m3u8-parser.git'
                    }

                    licenses {
                        license {
                            name 'MIT License'
                            url 'https://github.com/carlanton/m3u8-parser/blob/master/LICENSE'
                        }
                    }

                    developers {
                        developer {
                            id 'antonlindstrom'
                            name 'Anton Lindstr√∂m'
                            email 'carlantonlindstrom@gmail.com'
                        }
                    }
                }
            }

        }
    }
}

repositories {
    maven {
        url =  URI.create("http://maven.anypoint.tv/repository/public")
        credentials {
            username = "dev.anypointmedia"
            password = "*emflaj*"
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'hls-manipulator'
            artifactId = 'm3u8-parser'
            version = '0.0.10-SNAPSHOT'

            from components.java
        }
    }
    repositories {
        maven {
            // change to point to your repo, e.g. http://my.org/repo
            def releasesRepoUrl = URI.create("http://maven.anypoint.tv/repository/snapshots")
            def snapshotsRepoUrl = URI.create("http://maven.anypoint.tv/repository/releases")
            url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = "dev.anypointmedia"
                password = "*emflaj*"
            }
        }
    }
}
